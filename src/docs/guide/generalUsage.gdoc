h4. This guide will show you the basics of how to use this plugin.

If a guard directory has not been created after installation, simply add a guard directory off your grails-app directory.  It is
good practice to have this directory reside at the same level as the controller directory, service directory, etc.

{code}
+ grails-app
    +controllers
    +services
    ...
    +guards
{code}

The Guard artefacts follow the standard grails naming convention idea.  So for example, if you want to guard a controller called @HomeController@, you would create
a class within the guards directory called: @HomeGuard@.  Also, if your controller resides in package @laser.cat.com@, you must create
an identical package name in the guard directory.  If you fail to do this the guard plugin will not locate your guard class and execute
as if your @HomeController@ is not guarded.

Lets take a look at the following simple controller.

{code}
class ProfileController {
    def index() {
        //returns to the profile page
    }
}
{code}

Now we are going to guard this controller, assuming that no permission strings exist in the app before an authenticated
user navigates to this page.

{note}
    If a user has already visited the page, and/or already has the permission string the @guardedAccessControl@ call will not
    go to the guard and will just return true.
{note}

Now we will create a guard for our @ProfileController@.  Notice the two methods @hasPermission@ and @buildPermissionString@, which
must be included in every guard artefact.

{code}
@SuppressWarnings("GroovyUnusedDeclaration")
class ProfileGuard {

    boolean hasPermission(String actionName, Map<String, String> params ) {
        //grab the current user's id from shiro (implementation may be different for other apps)
        def currentUserId = SecurityUtils.subject?.principal?.userId

        //Lets suppose that a param.id is passed in that is supposed to be the id of the user requesting the page,
        //we can check to see if the current users id matches the id that was passed in.  If the ids don't match
        //we may be dealing with a malicious user
        return currentUserId == params.id
    }

    String buildPermissionString(String actionName, Map<String, String> params) {
        //Create a permission string that Shiro will check for in the users cache
        return "profile:$actionName:${params.id}"
    }
}
{code}

{note}
    It is very important that you fully understand how Shiro permission strings work, a good reference can be found on the
    [Shiro doumentation page|http://grails.org/plugin/shiro]
{note}

This is a very simple example.  If we wanted to we could check different params for different actions.

There you have it!  Your first guarded controller.